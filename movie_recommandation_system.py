# -*- coding: utf-8 -*-
"""movie_recommandation_system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F1534V4wLTvecUbdU1Ie_EC37v95xOzL

# *Importing the Required Libraries*
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import difflib

"""# *Reading the Data from CSV file*"""

movies_data = pd.read_csv('/content/movies_data.csv')

movies_data.head()

movies_data.tail()

movies_data.shape

movies_data.columns

"""# *Selecting the desired features for the movie recommandation system*"""

selected_features = ['genres','keywords','original_title','overview','tagline','cast','director']

"""# *Filling all the missing values with the null string*"""

for feature in selected_features:
  movies_data[feature] = movies_data[feature].fillna('')

"""# *Combining all the features*"""

combined_feature = movies_data['genres']+' '+movies_data['keywords']+' '+movies_data['original_title']+' '+movies_data['overview']+' '+movies_data['tagline']+' '+movies_data['cast']+' '+movies_data['director']

combined_feature

"""# *Converting the text data into feature vectors*"""

vectorizer = TfidfVectorizer()

feature_vector = vectorizer.fit_transform(combined_feature)

print(feature_vector)

"""# *Using Cosine Similarity*"""

# finding the cosine similarity

similarity = cosine_similarity(feature_vector)

similarity

similarity.shape

similarity[0]

"""# *Taking name of the movie from the user*"""

movie_name_user = input("Enter the name of your favourite movie : ")

"""# *Finding the clossest match of the user's entered movie*"""

movie_list = movies_data['original_title'].tolist()

movie_list

"""# *Finding the close match*"""

find_close_match = difflib.get_close_matches(movie_name_user,movie_list)

find_close_match

close_match = find_close_match[0]

close_match

"""# *Getting the index value of the closed match movie*"""

index_of_movie = movies_data[movies_data['original_title']==close_match]['index'].values[0]

index_of_movie

"""# *Comparing the similarity score of all the movies of the dataset with the user entered movie*"""

similarity_score = list(enumerate(similarity[index_of_movie]))

similarity_score

len(similarity_score)

sorted_similar_movies = sorted(similarity_score,reverse=True,key=lambda x: x[1])

sorted_similar_movies

"""# *Suggesting the movies for the user*"""

print("The suggested movie for you are listed below \n")

i = 1
for movie in sorted_similar_movies:
  index = movie[0]
  movie_title = movies_data[movies_data.index==index]['original_title'].values[0]
  if i<=30:
    print(f"{i} -- {movie_title}")
    i+=1

"""# **Movie Recommandation System**"""

def recommand_movie(movies_data,movie_list,similarity,movie_name_user):
  find_close_match = difflib.get_close_matches(movie_name_user,movie_list)
  if len(find_close_match)>0:
    close_match = find_close_match[0]
    index_of_movie = movies_data[movies_data['original_title']==close_match]['index'].values[0]
    similarity_score = list(enumerate(similarity[index_of_movie]))
    sorted_similar_movies = sorted(similarity_score,reverse=True,key=lambda x: x[1])
    print("The suggested movie for you are listed below \n")
    i = 1
    for movie in sorted_similar_movies:
      index = movie[0]
      movie_title = movies_data[movies_data.index==index]['original_title'].values[0]
      if i<=30:
        print(f"{i} -- {movie_title}")
        i+=1
  else:
    print("Sorry not possible to recommand any of the movie\n")
    print("You can try again with another movie\n")

movie_name_user = input("Enter the name of your favourite movie : ")
recommand_movie(movies_data,movie_list,similarity,movie_name_user)

